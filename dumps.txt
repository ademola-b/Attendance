SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    GestureDetector(
                      onTap: () =>
                          Navigator.pushNamed(context, '/initiate_attendance'),
                      child: AttContainer(desc: 'Initiate Attendance'),
                    ),
                    AttContainer(desc: 'Timetable')
                  ],
                ),
              ),
              SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    GestureDetector(
                      onTap: () => Navigator.pushNamed(context, '/performance'),
                      child: AttContainer(desc: 'Performance'),
                    ),
                    GestureDetector(
                        onTap: () {
                          Navigator.pushNamed(context, "/reports");
                        },
                        child: AttContainer(desc: 'Attendance Report'))
                  ],
                ),
              ),

=========================================================================
children: [
          Navigator(
              initialRoute: '/dashboard',
              onPopPage: (route, result) => route.didPop(result),
              onGenerateRoute: (settings) {
                final routes = {
                  '/dashboard': (context) => Dashboard(),
                  '/initiate_attendance': (context) => Initiate_Attendance(),
                  '/performance': (context) => Performance(),
                  '/more': (context) => More()
                };
                return MaterialPageRoute(
                  builder: (context) {
                    return routes[settings.name]!(context);
                  },
                );
              }),
        ],

        ==================================================
        //card to mark attendance
                      // GestureDetector(
                      //   onTap: () {
                      //     face!.isEmpty
                      //         ? showDialog(
                      //             barrierDismissible: false,
                      //             context: context,
                      //             builder: (context) => AlertDialog(
                      //               title: const Text("Register Face"),
                      //               content: const Text(
                      //                   "Oops!, You need to register your face before you can take attendance"),
                      //               actions: [
                      //                 TextButton(
                      //                     onPressed: () =>
                      //                         Navigator.pop(context),
                      //                     child: const Text('OK'))
                      //               ],
                      //             ),
                      //           )
                      //         : Navigator.pushNamed(
                      //             context, '/markAttendanceFace');
                      //   },
                      //   child: Container(
                      //     margin: const EdgeInsets.symmetric(horizontal: 30.0),
                      //     decoration: BoxDecoration(
                      //       borderRadius:
                      //           const BorderRadius.all(Radius.circular(10.0)),
                      //       color: Constants.backgroundColor,
                      //     ),
                      //     child: ListTile(
                      //       title: const Text('Course Name'),
                      //       subtitle: Row(
                      //         mainAxisAlignment: MainAxisAlignment.spaceAround,
                      //         children: const [
                      //           Text('Course Title'),
                      //           Text('Time Range')
                      //         ],
                      //       ),
                      //       trailing: const Icon(FontAwesomeIcons.angleRight),
                      //     ),
                      //   ),
                      // ),

                      // const SizedBox(height: 20.0),


Mark Attendance Slot card
// Expanded(
                      //   child: FutureBuilder<List<AttendanceSlotResponse?>?>(
                      //       future: futureAttendanceSlot,
                      //       builder: (context, snapshot) {
                      //         if (snapshot.hasData && snapshot.data!.isEmpty) {
                      //           return DefaultText(
                      //             size: 18.0,
                      //             text: "Oops!, No Ongoing Attendance",
                      //             color: Constants.primaryColor,
                      //           );
                      //         }
                      //         if (snapshot.hasData) {
                      //           var slots = snapshot.data;
                      //           // var format = DateFormat("HH:mm");
                      //           return ListView.builder(
                      //             shrinkWrap: true,
                      //             scrollDirection: Axis.vertical,
                      //             itemCount: slots == null ? 0 : slots.length,
                      //             itemBuilder:
                      //                 (BuildContext context, int index) {
                      //               return GestureDetector(
                      //                 onTap: () async {
                      //                   face!.isEmpty
                      //                       ? Constants.DialogBox(
                      //                           context,
                      //                           "Oops!, You need to register your face before you can take attendance",
                      //                           Colors.amber,
                      //                           Icons.camera)
                      //                       : await startStreaming(
                      //                           slots![index]!.latitude,
                      //                           slots[index]!.longitude,
                      //                           slots[index]!.radius);

                      //                   if (geofenceStatus ==
                      //                       'GeofenceStatus.exit') {
                      //                     await Constants.DialogBox(
                      //                         context,
                      //                         "Oops!, You are not in the class range",
                      //                         Colors.red[700],
                      //                         Icons.location_off_outlined);
                      //                     // Navigator.popAndPushNamed(
                      //                     //     context, '/studentNav');
                      //                   } else if (geofenceStatus ==
                      //                       'GeofenceStatus.enter') {
                      //                     List<Attendance>? _att =
                      //                         await RemoteService
                      //                             .getMarkedAttendance(context,
                      //                                 slots![index]!.id);
                      //                     if (_att != null && _att.isEmpty) {
                      //                       Navigator.pushNamed(
                      //                           context, '/markAttendanceFace',
                      //                           arguments: {
                      //                             'slot_id': slots[index]!.id
                      //                           });
                      //                     } else {
                      //                       Constants.DialogBox(
                      //                           context,
                      //                           "You've marked attendance already",
                      //                           Colors.amber,
                      //                           Icons.warning_amber_outlined);
                      //                     }
                      //                   }
                      //                 },
                      //                 child: Container(
                      //                   width: size.width,
                      //                   margin: const EdgeInsets.symmetric(
                      //                       horizontal: 30.0),
                      //                   decoration: BoxDecoration(
                      //                     borderRadius: const BorderRadius.all(
                      //                         Radius.circular(10.0)),
                      //                     color: Constants.backgroundColor,
                      //                   ),
                      //                   child: ListTile(
                      //                     title: DefaultText(
                      //                       text: slots![index]!
                      //                           .courseId
                      //                           .courseTitle,
                      //                       size: 17.0,
                      //                     ),
                      //                     subtitle: Row(
                      //                       mainAxisAlignment:
                      //                           MainAxisAlignment.spaceAround,
                      //                       children: [
                      //                         DefaultText(
                      //                           text: slots[index]!
                      //                               .courseId
                      //                               .courseCode,
                      //                           size: 15.0,
                      //                         ),
                      //                         const Spacer(),
                      //                         Column(
                      //                           children: [
                      //                             const DefaultText(
                      //                                 text: "Time Ending",
                      //                                 size: 15.0),
                      //                             DefaultText(
                      //                                 text:
                      //                                     slots[index]!.endTime,
                      //                                 size: 15.0),
                      //                           ],
                      //                         )
                      //                       ],
                      //                     ),
                      //                     trailing: const Icon(
                      //                         FontAwesomeIcons.angleRight),
                      //                   ),
                      //                 ),
                      //               );
                      //             },
                      //           );
                      //         } else if (snapshot.hasError) {
                      //           print('An error occurred');
                      //         }
                      //         return const CircularProgressIndicator();
                      //       }),
                      // )

String parsedTime = DateFormat.jm().format(
          DateFormat('HH:mm').parse(pickedTime.format(context).toString()));
      DateTime date = DateTime.now();
      String second = date.second.toString().padLeft(2, '0');
      List timeSplit = pickedTime.format(context).split(' ');
      print("time split: $timeSplit");
      String formattedTime = timeSplit[0];
      String time = '$formattedTime:$second';
      String type = '';
      if (timeSplit.length > 1) {
        type = timeSplit[1];
        time = '$time $type';
      }

      print("time $time");
      // DateTime parsedTime = DateFormat.jm()
      //     .format(DateFormat('HH:mm'))
      //     .parse(pickedTime.format(context).toString());
      // String formattedTime = DateFormat('HH:mm').format(parsedTime);
      return time;
      return formattedTime;


Because location isn't magic. It works on wireless signals, GPS signals, etc. These change, they have noise, they have intereference. The calculations aren't exact. Notice the accuracy- an X meters of accuracy just means there's a 66% chance you're within X meters of that location. So yes, your location will constantly change. You have to decide how much change you're willing to ignore before deciding you've really moved.

Also note that you'll once in a while get a reading that's just really off. For example, if you run GPS all night you'll get a few readings that show you a mile off. You have to filter out these spikes as well, or deal with the fact they appeared to teleport.